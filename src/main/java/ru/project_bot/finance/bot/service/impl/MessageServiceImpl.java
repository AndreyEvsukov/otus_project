package ru.project_bot.finance.bot.service.impl;

import lombok.val;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import ru.project_bot.finance.bot.model.CallbackData;
import ru.project_bot.finance.bot.model.SuggestionsData;
import ru.project_bot.finance.bot.service.*;
import ru.project_bot.finance.util.PaginationUtil;

import java.util.ArrayList;
import java.util.List;

@Service
    public class MessageServiceImpl implements MessageService {

    @Autowired
    private TelegramSenderService telegramSenderService;
    @Autowired
    private KeyboardService keyboardService;
    @Autowired
    private DataService dataService;
    @Autowired
    private SearchService searchService;

    @Override
    public void sendMainMenu(long chatId) {
        val message = createSimpleMessage(chatId,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboardService.createMainMenuKeyboard());
        telegramSenderService.execute(message);
    }

    @Override
    public void sendCurrencyInstructions(long chatId) {
        val messageText = """
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR, CNY) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞.
                
                –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç:
                ‚Ä¢ USD - –î–æ–ª–ª–∞—Ä –°–®–ê
                ‚Ä¢ EUR - –ï–≤—Ä–æ
                ‚Ä¢ CNY - –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å
                ‚Ä¢ JPY - –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞
                ‚Ä¢ GBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤""";
        sendMessage(chatId, messageText);
    }

    @Override
    public void sendStockInstructions(long chatId) {
        val messageText = """
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞.
                
                –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ü–∏–π:
                ‚Ä¢ SBER - –°–±–µ—Ä–±–∞–Ω–∫
                ‚Ä¢ GAZP - –ì–∞–∑–ø—Ä–æ–º
                ‚Ä¢ LKOH - –õ—É–∫–æ–π–ª
                ‚Ä¢ GMKN - –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å
                ‚Ä¢ ROSN - –†–æ—Å–Ω–µ—Ñ—Ç—å""";
        sendMessage(chatId, messageText);
    }

    @Override
    public void sendSearchInstructions(long chatId) {
        val messageText = """
                –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç –∏–ª–∏ –∞–∫—Ü–∏–π.
                
                –ü—Ä–∏–º–µ—Ä—ã:
                ‚Ä¢ "–¥–æ–ª–ª–∞—Ä" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç
                ‚Ä¢ "—Å–±–µ—Ä" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ü–∏–π
                ‚Ä¢ "eur" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É
                
                –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                /search_currency [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞–ª—é—Ç–∞–º
                /search_stock [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ü–∏—è–º""";
        sendMessage(chatId, messageText);
    }

    @Override
    public void sendMessage(long chatId, String text) {
        val message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        telegramSenderService.execute(message);
    }

    @Override
    public void handleInstrumentInput(long chatId, String input) {
        val code = input.trim().toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
        if (dataService.isCurrencyExists(code)) {
            sendCurrencyRate(chatId, code);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏—é
        if (dataService.isStockExists(code)) {
            sendStockPrice(chatId, code);
            return;
        }

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        List<String> suggestions = searchService.getAutocompleteSuggestions(code, 5);
        if (!suggestions.isEmpty()) {
            sendSuggestions(chatId, suggestions, code);
        } else {
            sendMessage(chatId,
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞.");
        }
    }

    @Override
    public void sendCurrencyRate(long chatId, String currencyCode) {
        Message tempMessage = telegramSenderService.sendMessage(
                createSimpleMessage(chatId, "üîç –ò—â—É –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã " + currencyCode + "...")
        );

        val rate = dataService.getNormalizedCurrencyRate(currencyCode);
        String response;

        if (rate != null) {
            response = String.format("üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã %s: %.4f RUB", currencyCode, rate);
        } else {
            val currencyName = dataService.getCurrencyName(currencyCode);
            response = String.format("–ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã %s (%s) –Ω–µ –Ω–∞–π–¥–µ–Ω.", currencyCode , currencyName);
        }

        if (tempMessage != null) {
            simpleEditMessage(chatId, tempMessage.getMessageId(), response);
        }
        else {
            sendMessage(chatId, response);
        }
    }

    @Override
    public void sendStockPrice(long chatId, String stockCode) {
        Message tempMessage = telegramSenderService.sendMessage(
                createSimpleMessage(chatId, "üîç –ò—â—É —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ " + stockCode + "...")
        );

        val price = dataService.getStockPrice(stockCode);
        String response;

        if (price != null) {
            response = String.format("üìà –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ %s: %.4f RUB", stockCode, price);
        } else {
            val stockName = dataService.getStockName(stockCode);
            response = String.format("–¶–µ–Ω–∞ –¥–ª—è –∞–∫—Ü–∏–∏ %s (%s)  –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", stockCode, stockName );
        }

        if (tempMessage != null) {
            simpleEditMessage(chatId, tempMessage.getMessageId(), response);
        }
        else {
            sendMessage(chatId, response);
        }
    }

    @Override
    public void sendSuggestions(long chatId, List<String> suggestions, String query) {
        val suggestionsData = new ArrayList<SuggestionsData>(suggestions.size());
        val message = new StringBuilder();
        message.append("üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '").append(query).append("':\n\n");

        for (String suggestion : suggestions) {
            if (dataService.isCurrencyExists(suggestion)) {
                message.append("üí∞ ").append(suggestion);
                val currencyName = dataService.getCurrencyName(suggestion);
                if (currencyName != null) {
                    message.append(" (")
                           .append(currencyName)
                           .append(" )");
                }
                suggestionsData.add(SuggestionsData.builder()
                        .suggestion(suggestion)
                        .type(CallbackData.CURRENCY_PREFIX).build()
                );
            } else if (dataService.isStockExists(suggestion)) {
                message.append("üìä ").append(suggestion);
                val stockName = dataService.getStockName(suggestion);
                if (stockName != null) {
                    message.append(" (")
                           .append(stockName)
                           .append(" )");
                }
                suggestionsData.add(SuggestionsData.builder()
                        .suggestion(suggestion)
                        .type(CallbackData.STOCK_PREFIX).build()
                );
            }
            message.append("\n");
        }

        message.append("\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –≤—ã—à–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        InlineKeyboardMarkup markup = keyboardService.createSuggestionsKeyboard(suggestionsData);
        val sendMessage = createSimpleMessage(chatId, message.toString(), markup);
        telegramSenderService.execute(sendMessage);
    }

    @Override
    public void sendSearchResults(long chatId, String query, String searchType, int page) {
        List<String> results;
        val pageSize = 10;

        if ("currency".equals(searchType)) {
            results = searchService.searchCurrencies(query);
        } else if ("stock".equals(searchType)) {
            results = searchService.searchStocks(query);
        } else {
            results = searchService.searchAll(query);
        }

        if (results.isEmpty()) {
            sendMessage(chatId, "–ü–æ –∑–∞–ø—Ä–æ—Å—É '" + query + "' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        val pageResults = PaginationUtil.getPage(results, page, pageSize);
        val totalPages = PaginationUtil.getTotalPages(results.size(), pageSize);

        val message = new StringBuilder();
        message.append("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: '").append(query).append("':\n");
        message.append("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ").append(page + 1).append(" –∏–∑ ").append(totalPages).append("\n\n");

        for (String result : pageResults) {
            if (dataService.isCurrencyExists(result)) {
                message.append("üí∞ ").append(result);
                val currencyName = dataService.getCurrencyName(result);
                if (currencyName != null) {
                    message.append(" (")
                            .append(currencyName)
                            .append(" )");
                }
            } else if (dataService.isStockExists(result)) {
                message.append("üìä ").append(result);
                val stockName = dataService.getStockName(result);
                if (stockName != null) {
                    message.append(" (")
                            .append(stockName)
                            .append(" )");
                }
            }
            message.append("\n");
        }

        InlineKeyboardMarkup markup = keyboardService.createSearchPaginationKeyboard(
                query, searchType, page, totalPages);
        val sendMessage = createSimpleMessage(chatId, message.toString(), markup);

        telegramSenderService.execute(sendMessage);
    }

    @Override
    public void sendHelpMessage(long chatId) {
        String helpText = """
                ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:
                
                –ö–æ–º–∞–Ω–¥—ã:
                /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                /rate - –ö—É—Ä—Å –≤–∞–ª—é—Ç
                /price - –¶–µ–Ω–∞ –∞–∫—Ü–∏–π
                /search - –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                
                –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
                1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –∞–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
                2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞
                3. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ""";

        sendMessage(chatId, helpText);
    }

    @Override
    public void removeInlineKeyboard(long chatId, int messageId) {
        simpleEditMessage(chatId, messageId, "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω ‚úÖ");
    }

    private SendMessage createSimpleMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        return message;
    }

    private SendMessage createSimpleMessage(long chatId, String text, ReplyKeyboard markup) {
        val message = createSimpleMessage(chatId, text);
        message.setReplyMarkup(markup);
        return message;
    }

    private void simpleEditMessage(long chatId, int messageId, String messageText) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setMessageId(messageId);
        editMessage.setText(messageText);

        telegramSenderService.editMessageText(editMessage);
    }
}